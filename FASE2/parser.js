window.FASE1 = // @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\n";
  var peg$c1 = ".";
  var peg$c2 = "align";
  var peg$c3 = "ascii";
  var peg$c4 = "asciz";
  var peg$c5 = "byte";
  var peg$c6 = "hword";
  var peg$c7 = "word";
  var peg$c8 = "quad";
  var peg$c9 = "skip";
  var peg$c10 = "data";
  var peg$c11 = "text";
  var peg$c12 = "global";
  var peg$c13 = "section";
  var peg$c14 = "space";
  var peg$c15 = "zero";
  var peg$c16 = "incbin";
  var peg$c17 = "set";
  var peg$c18 = "equ";
  var peg$c19 = "bss";
  var peg$c20 = ":";
  var peg$c21 = "uxtb";
  var peg$c22 = ",";
  var peg$c23 = "smulh";
  var peg$c24 = "smull";
  var peg$c25 = "umaddl";
  var peg$c26 = "umnegl";
  var peg$c27 = "umsubl";
  var peg$c28 = "umulh";
  var peg$c29 = "umull";
  var peg$c30 = "add";
  var peg$c31 = "adc";
  var peg$c32 = "cmn";
  var peg$c33 = "madd";
  var peg$c34 = "mneg";
  var peg$c35 = "msub";
  var peg$c36 = "ngc";
  var peg$c37 = "sbc";
  var peg$c38 = "smaddl";
  var peg$c39 = "smnegl";
  var peg$c40 = "smsubl";
  var peg$c41 = "sub";
  var peg$c42 = "mul";
  var peg$c43 = "div";
  var peg$c44 = "udiv";
  var peg$c45 = "sdiv";
  var peg$c46 = "bfi";
  var peg$c47 = "bfxil";
  var peg$c48 = "cls";
  var peg$c49 = "clz";
  var peg$c50 = "extr";
  var peg$c51 = "rbit";
  var peg$c52 = "rev";
  var peg$c53 = "rev16";
  var peg$c54 = "rev32";
  var peg$c55 = "bfiz";
  var peg$c56 = "bfx";
  var peg$c57 = "sxtw";
  var peg$c58 = "and";
  var peg$c59 = "ands";
  var peg$c60 = "bic";
  var peg$c61 = "eon";
  var peg$c62 = "orr";
  var peg$c63 = "eor";
  var peg$c64 = "mov";
  var peg$c65 = "movk";
  var peg$c66 = "orn";
  var peg$c67 = "tst";
  var peg$c68 = "movn";
  var peg$c69 = "movz";
  var peg$c70 = "#";
  var peg$c71 = "ldrb";
  var peg$c72 = "ldr";
  var peg$c73 = "=";
  var peg$c74 = "[";
  var peg$c75 = "]";
  var peg$c76 = "ldp";
  var peg$c77 = "ldpsw";
  var peg$c78 = "prfm";
  var peg$c79 = "clr";
  var peg$c80 = "str";
  var peg$c81 = "strb";
  var peg$c82 = "stp";
  var peg$c83 = "mvn";
  var peg$c84 = "lsl";
  var peg$c85 = "lsr";
  var peg$c86 = "asr";
  var peg$c87 = "ror";
  var peg$c88 = "cmp";
  var peg$c89 = "b";
  var peg$c90 = "ble";
  var peg$c91 = "bl";
  var peg$c92 = "blr";
  var peg$c93 = "br";
  var peg$c94 = "cbnz";
  var peg$c95 = "cbz";
  var peg$c96 = "ret";
  var peg$c97 = "tbnz";
  var peg$c98 = "tbz";
  var peg$c99 = "beq";
  var peg$c100 = "bne";
  var peg$c101 = "bgt";
  var peg$c102 = "blt";
  var peg$c103 = "svc";
  var peg$c104 = "cas";
  var peg$c105 = "a";
  var peg$c106 = "l";
  var peg$c107 = "swp";
  var peg$c108 = "ccmn";
  var peg$c109 = "ccmp";
  var peg$c110 = "cinc";
  var peg$c111 = "cinv";
  var peg$c112 = "cneg";
  var peg$c113 = "csel";
  var peg$c114 = "cset";
  var peg$c115 = "csetm";
  var peg$c116 = "csinc";
  var peg$c117 = "eq";
  var peg$c118 = "ne";
  var peg$c119 = "cs";
  var peg$c120 = "cc";
  var peg$c121 = "mi";
  var peg$c122 = "pl";
  var peg$c123 = "vs";
  var peg$c124 = "vc";
  var peg$c125 = "hi";
  var peg$c126 = "ls";
  var peg$c127 = "ge";
  var peg$c128 = "lt";
  var peg$c129 = "gt";
  var peg$c130 = "le";
  var peg$c131 = "al";
  var peg$c132 = "nv";
  var peg$c133 = "csinv";
  var peg$c134 = "csneg";
  var peg$c135 = "x";
  var peg$c136 = "30";
  var peg$c137 = "sp";
  var peg$c138 = "lr";
  var peg$c139 = "zr";
  var peg$c140 = "pc";
  var peg$c141 = "xzr";
  var peg$c142 = "crc32";
  var peg$c143 = "c";
  var peg$c144 = "h";
  var peg$c145 = "w";
  var peg$c146 = "ld";
  var peg$c147 = "uxth";
  var peg$c148 = "uxtw";
  var peg$c149 = "uxtx";
  var peg$c150 = "sxtb";
  var peg$c151 = "sxth";
  var peg$c152 = "sxtx";
  var peg$c153 = "'";
  var peg$c154 = "0x";
  var peg$c155 = "0b";
  var peg$c156 = "\"";
  var peg$c157 = "//";
  var peg$c158 = ";";
  var peg$c159 = "/*";
  var peg$c160 = "*/";

  var peg$r0 = /^[12]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[+\-]/;
  var peg$r3 = /^[01]/;
  var peg$r4 = /^[0-9a-fA-F]/;
  var peg$r5 = /^[a-zA-Z]/;
  var peg$r6 = /^[a-zA-Z_]/;
  var peg$r7 = /^[a-zA-Z0-9_]/;
  var peg$r8 = /^[^"]/;
  var peg$r9 = /^[^\n]/;
  var peg$r10 = /^[^*]/;
  var peg$r11 = /^[*]/;
  var peg$r12 = /^[^*\/]/;
  var peg$r13 = /^[ \t]/;

  var peg$e0 = peg$literalExpectation("\n", false);
  var peg$e1 = peg$literalExpectation(".", false);
  var peg$e2 = peg$literalExpectation("align", false);
  var peg$e3 = peg$literalExpectation("ascii", false);
  var peg$e4 = peg$literalExpectation("asciz", false);
  var peg$e5 = peg$literalExpectation("byte", false);
  var peg$e6 = peg$literalExpectation("hword", false);
  var peg$e7 = peg$literalExpectation("word", false);
  var peg$e8 = peg$literalExpectation("quad", false);
  var peg$e9 = peg$literalExpectation("skip", false);
  var peg$e10 = peg$literalExpectation("data", false);
  var peg$e11 = peg$literalExpectation("text", false);
  var peg$e12 = peg$literalExpectation("global", false);
  var peg$e13 = peg$literalExpectation("section", false);
  var peg$e14 = peg$literalExpectation("space", false);
  var peg$e15 = peg$literalExpectation("zero", false);
  var peg$e16 = peg$literalExpectation("incbin", false);
  var peg$e17 = peg$literalExpectation("set", false);
  var peg$e18 = peg$literalExpectation("equ", false);
  var peg$e19 = peg$literalExpectation("bss", false);
  var peg$e20 = peg$literalExpectation(":", false);
  var peg$e21 = peg$literalExpectation("UXTB", true);
  var peg$e22 = peg$literalExpectation(",", false);
  var peg$e23 = peg$literalExpectation("SMULH", true);
  var peg$e24 = peg$literalExpectation("SMULL", true);
  var peg$e25 = peg$literalExpectation("UMADDL", true);
  var peg$e26 = peg$literalExpectation("UMNEGL", true);
  var peg$e27 = peg$literalExpectation("UMSUBL", true);
  var peg$e28 = peg$literalExpectation("UMULH", true);
  var peg$e29 = peg$literalExpectation("UMULL", true);
  var peg$e30 = peg$otherExpectation("Instrucci\xF3n de Suma");
  var peg$e31 = peg$literalExpectation("ADD", true);
  var peg$e32 = peg$otherExpectation("Instrucci\xF3n de Suma con acarreo");
  var peg$e33 = peg$literalExpectation("ADC", true);
  var peg$e34 = peg$otherExpectation("Instrucci\xF3n de Comparaci\xF3n con negado");
  var peg$e35 = peg$literalExpectation("CMN", true);
  var peg$e36 = peg$literalExpectation("MADD", true);
  var peg$e37 = peg$literalExpectation("MNEG", true);
  var peg$e38 = peg$literalExpectation("MSUB", true);
  var peg$e39 = peg$literalExpectation("NGC", true);
  var peg$e40 = peg$literalExpectation("SBC", true);
  var peg$e41 = peg$literalExpectation("SMADDL", true);
  var peg$e42 = peg$literalExpectation("SMNEGL", true);
  var peg$e43 = peg$literalExpectation("SMSUBL", true);
  var peg$e44 = peg$literalExpectation("SUB", true);
  var peg$e45 = peg$literalExpectation("MUL", true);
  var peg$e46 = peg$literalExpectation("DIV", true);
  var peg$e47 = peg$literalExpectation("UDIV", true);
  var peg$e48 = peg$literalExpectation("SDIV", true);
  var peg$e49 = peg$literalExpectation("BFI", true);
  var peg$e50 = peg$literalExpectation("BFXIL", true);
  var peg$e51 = peg$literalExpectation("CLS", true);
  var peg$e52 = peg$literalExpectation("CLZ", true);
  var peg$e53 = peg$literalExpectation("EXTR", true);
  var peg$e54 = peg$literalExpectation("RBIT", true);
  var peg$e55 = peg$literalExpectation("REV", true);
  var peg$e56 = peg$literalExpectation("REV16", true);
  var peg$e57 = peg$literalExpectation("REV32", true);
  var peg$e58 = peg$literalExpectation("BFIZ", true);
  var peg$e59 = peg$literalExpectation("BFX", true);
  var peg$e60 = peg$literalExpectation("SXTW", true);
  var peg$e61 = peg$literalExpectation("AND", true);
  var peg$e62 = peg$literalExpectation("ANDS", true);
  var peg$e63 = peg$literalExpectation("BIC", true);
  var peg$e64 = peg$literalExpectation("EON", true);
  var peg$e65 = peg$literalExpectation("ORR", true);
  var peg$e66 = peg$literalExpectation("EOR", true);
  var peg$e67 = peg$otherExpectation("Instrucci\xF3n MOV");
  var peg$e68 = peg$literalExpectation("MOV", true);
  var peg$e69 = peg$otherExpectation("Instrucci\xF3n MOVK");
  var peg$e70 = peg$literalExpectation("MOVK", true);
  var peg$e71 = peg$literalExpectation("ORN", true);
  var peg$e72 = peg$literalExpectation("TST", true);
  var peg$e73 = peg$literalExpectation("MOVN", true);
  var peg$e74 = peg$literalExpectation("MOVZ", true);
  var peg$e75 = peg$literalExpectation("#", false);
  var peg$e76 = peg$otherExpectation("Registro de 64 o 32 Bits");
  var peg$e77 = peg$otherExpectation("Source para MOV");
  var peg$e78 = peg$otherExpectation("Instrucci\xF3n LDRB");
  var peg$e79 = peg$literalExpectation("LDRB", true);
  var peg$e80 = peg$otherExpectation("Instrucci\xF3n LDR");
  var peg$e81 = peg$literalExpectation("LDR", true);
  var peg$e82 = peg$literalExpectation("=", false);
  var peg$e83 = peg$literalExpectation("[", false);
  var peg$e84 = peg$literalExpectation("]", false);
  var peg$e85 = peg$otherExpectation("Instrucci\xF3n LDP");
  var peg$e86 = peg$literalExpectation("LDP", true);
  var peg$e87 = peg$literalExpectation("LDPSW", true);
  var peg$e88 = peg$literalExpectation("PRFM", true);
  var peg$e89 = peg$literalExpectation("CLR", true);
  var peg$e90 = peg$literalExpectation("SET", true);
  var peg$e91 = peg$otherExpectation("Instrucci\xF3n STR");
  var peg$e92 = peg$literalExpectation("STR", true);
  var peg$e93 = peg$otherExpectation("Instrucci\xF3n STRB");
  var peg$e94 = peg$literalExpectation("STRB", true);
  var peg$e95 = peg$otherExpectation("Instrucci\xF3n STP");
  var peg$e96 = peg$literalExpectation("STP", true);
  var peg$e97 = peg$otherExpectation("Instrucci\xF3n MVN");
  var peg$e98 = peg$literalExpectation("MVN", true);
  var peg$e99 = peg$otherExpectation("Instrucci\xF3n LSL");
  var peg$e100 = peg$literalExpectation("LSL", true);
  var peg$e101 = peg$otherExpectation("Instrucci\xF3n LSR");
  var peg$e102 = peg$literalExpectation("LSR", true);
  var peg$e103 = peg$otherExpectation("Instrucci\xF3n ASR");
  var peg$e104 = peg$literalExpectation("ASR", true);
  var peg$e105 = peg$otherExpectation("Instrucci\xF3n ROR");
  var peg$e106 = peg$literalExpectation("ROR", true);
  var peg$e107 = peg$otherExpectation("Instrucci\xF3n CMP");
  var peg$e108 = peg$literalExpectation("CMP", true);
  var peg$e109 = peg$otherExpectation("Instrucci\xF3n B");
  var peg$e110 = peg$literalExpectation("B", true);
  var peg$e111 = peg$otherExpectation("Instrucci\xF3n BLE");
  var peg$e112 = peg$literalExpectation("BLE", true);
  var peg$e113 = peg$otherExpectation("Instrucci\xF3n BL");
  var peg$e114 = peg$literalExpectation("BL", true);
  var peg$e115 = peg$otherExpectation("Instrucci\xF3n BLR");
  var peg$e116 = peg$literalExpectation("BLR", true);
  var peg$e117 = peg$otherExpectation("Instrucci\xF3n BR");
  var peg$e118 = peg$literalExpectation("BR", true);
  var peg$e119 = peg$literalExpectation("CBNZ", true);
  var peg$e120 = peg$literalExpectation("CBZ", true);
  var peg$e121 = peg$otherExpectation("Instrucci\xF3n RET");
  var peg$e122 = peg$literalExpectation("RET", true);
  var peg$e123 = peg$literalExpectation("TBNZ", true);
  var peg$e124 = peg$literalExpectation("TBZ", true);
  var peg$e125 = peg$otherExpectation("Instrucci\xF3n BEQ");
  var peg$e126 = peg$literalExpectation("BEQ", true);
  var peg$e127 = peg$otherExpectation("Instrucci\xF3n BNE");
  var peg$e128 = peg$literalExpectation("BNE", true);
  var peg$e129 = peg$otherExpectation("Instrucci\xF3n BGT");
  var peg$e130 = peg$literalExpectation("BGT", true);
  var peg$e131 = peg$otherExpectation("Instrucci\xF3n BLT");
  var peg$e132 = peg$literalExpectation("BLT", true);
  var peg$e133 = peg$otherExpectation("Instrucci\xF3n SVC");
  var peg$e134 = peg$literalExpectation("SVC", true);
  var peg$e135 = peg$literalExpectation("CAS", true);
  var peg$e136 = peg$literalExpectation("A", true);
  var peg$e137 = peg$literalExpectation("L", true);
  var peg$e138 = peg$literalExpectation("SWP", true);
  var peg$e139 = peg$literalExpectation("CCMN", true);
  var peg$e140 = peg$literalExpectation("CCMP", true);
  var peg$e141 = peg$literalExpectation("CINC", true);
  var peg$e142 = peg$literalExpectation("CINV", true);
  var peg$e143 = peg$literalExpectation("CNEG", true);
  var peg$e144 = peg$literalExpectation("CSEL", true);
  var peg$e145 = peg$literalExpectation("CSET", true);
  var peg$e146 = peg$literalExpectation("CSETM", true);
  var peg$e147 = peg$literalExpectation("CSINC", true);
  var peg$e148 = peg$literalExpectation("EQ", true);
  var peg$e149 = peg$literalExpectation("NE", true);
  var peg$e150 = peg$literalExpectation("CS", true);
  var peg$e151 = peg$literalExpectation("CC", true);
  var peg$e152 = peg$literalExpectation("MI", true);
  var peg$e153 = peg$literalExpectation("PL", true);
  var peg$e154 = peg$literalExpectation("VS", true);
  var peg$e155 = peg$literalExpectation("VC", true);
  var peg$e156 = peg$literalExpectation("HI", true);
  var peg$e157 = peg$literalExpectation("LS", true);
  var peg$e158 = peg$literalExpectation("GE", true);
  var peg$e159 = peg$literalExpectation("LT", true);
  var peg$e160 = peg$literalExpectation("GT", true);
  var peg$e161 = peg$literalExpectation("LE", true);
  var peg$e162 = peg$literalExpectation("AL", true);
  var peg$e163 = peg$literalExpectation("NV", true);
  var peg$e164 = peg$literalExpectation("CSINV", true);
  var peg$e165 = peg$literalExpectation("CSNEG", true);
  var peg$e166 = peg$otherExpectation("Registro_64_Bits");
  var peg$e167 = peg$literalExpectation("x", true);
  var peg$e168 = peg$literalExpectation("30", false);
  var peg$e169 = peg$classExpectation(["1", "2"], false, false);
  var peg$e170 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e171 = peg$literalExpectation("SP", true);
  var peg$e172 = peg$literalExpectation("LR", true);
  var peg$e173 = peg$literalExpectation("ZR", true);
  var peg$e174 = peg$literalExpectation("PC", true);
  var peg$e175 = peg$literalExpectation("XZR", true);
  var peg$e176 = peg$literalExpectation("CRC32", true);
  var peg$e177 = peg$literalExpectation("C", true);
  var peg$e178 = peg$literalExpectation("H", true);
  var peg$e179 = peg$literalExpectation("W", true);
  var peg$e180 = peg$literalExpectation("X", true);
  var peg$e181 = peg$literalExpectation("LD", true);
  var peg$e182 = peg$otherExpectation("Registro_32_Bits");
  var peg$e183 = peg$literalExpectation("w", true);
  var peg$e184 = peg$otherExpectation("Operandor 64 Bits");
  var peg$e185 = peg$otherExpectation("Operandor 32 Bits");
  var peg$e186 = peg$otherExpectation("Operador de Desplazamiento");
  var peg$e187 = peg$otherExpectation("Operador de Extensi\xF3n");
  var peg$e188 = peg$literalExpectation("UXTH", true);
  var peg$e189 = peg$literalExpectation("UXTW", true);
  var peg$e190 = peg$literalExpectation("UXTX", true);
  var peg$e191 = peg$literalExpectation("SXTB", true);
  var peg$e192 = peg$literalExpectation("SXTH", true);
  var peg$e193 = peg$literalExpectation("SXTX", true);
  var peg$e194 = peg$otherExpectation("Inmediato");
  var peg$e195 = peg$classExpectation(["+", "-"], false, false);
  var peg$e196 = peg$literalExpectation("'", false);
  var peg$e197 = peg$literalExpectation("0x", false);
  var peg$e198 = peg$literalExpectation("0b", false);
  var peg$e199 = peg$classExpectation(["0", "1"], false, false);
  var peg$e200 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e201 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e202 = peg$otherExpectation("Espresi\xF3n");
  var peg$e203 = peg$otherExpectation("Etiqueta");
  var peg$e204 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e205 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e206 = peg$otherExpectation("Numero Entero");
  var peg$e207 = peg$otherExpectation("Cadena de Texto");
  var peg$e208 = peg$literalExpectation("\"", false);
  var peg$e209 = peg$classExpectation(["\""], true, false);
  var peg$e210 = peg$otherExpectation("Linea En Blanco");
  var peg$e211 = peg$otherExpectation("Comentario");
  var peg$e212 = peg$literalExpectation("//", false);
  var peg$e213 = peg$classExpectation(["\n"], true, false);
  var peg$e214 = peg$literalExpectation(";", false);
  var peg$e215 = peg$otherExpectation("Comentario Multilinea");
  var peg$e216 = peg$literalExpectation("/*", false);
  var peg$e217 = peg$classExpectation(["*"], true, false);
  var peg$e218 = peg$classExpectation(["*"], false, false);
  var peg$e219 = peg$classExpectation(["*", "/"], true, false);
  var peg$e220 = peg$literalExpectation("*/", false);
  var peg$e221 = peg$otherExpectation("Ignorado");
  var peg$e222 = peg$classExpectation([" ", "\t"], false, false);

  var peg$f0 = function(line) {
            root.children = [...line];
            root.children = root.children.filter(node => node.type !== 'EMPTY');
            root.children = root.children.filter(node => node.type !== 'COMMENT');
            return root;
        };
  var peg$f1 = function(name, args) {
    const node = createNode('DIRECTIVE', 'Directive');
    addChild(node, name);
    if(args){
        addChild(node, args);
    }
    return node;
  
  };
  var peg$f2 = function() {
        const node = createNode('DIRECTIVE', text());
        return node;  
    };
  var peg$f3 = function(label) {
    const node = createNode('SECTION', 'Section');
    addChild(node, label);
    return node;
  };
  var peg$f4 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'UXTB');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f5 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SMULH');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f6 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SMULL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f7 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'UMADDL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            addChild(node, src3);
            return node;
        };
  var peg$f8 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'UMNEGL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f9 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'UMSUBL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            addChild(node, src3);
            return node;
        };
  var peg$f10 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'UMULH');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f11 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'UMULL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f12 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ADD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f13 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ADD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f14 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ADC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f15 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ADC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f16 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CMN');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f17 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CMN');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f18 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'MADD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f19 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'MADD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f20 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'MNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f21 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'MNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f22 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'MSUB');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f23 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'MSUB');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f24 = function(rd, src2) {
            const node = createNode('INSTRUCTION', 'NGC');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            addChild(node, src2);
            return node;
        };
  var peg$f25 = function(rd, src2) {
            const node = createNode('INSTRUCTION', 'NGC');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            addChild(node, src2);
            return node;
        };
  var peg$f26 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SBC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f27 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SBC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f28 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'SMADDL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f29 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SMNEGL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f30 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'SMSUBL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            setNode();
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f31 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SUB');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f32 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SUB');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f33 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'MUL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f34 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'MUL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f35 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'DIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f36 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'DIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f37 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'UDIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f38 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'UDIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f39 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SDIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f40 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SDIV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f41 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFI');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f42 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFI');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f43 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFXIL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f44 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFXIL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f45 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f46 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f47 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLZ');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f48 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLZ');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f49 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'EXTR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f50 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'EXTR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f51 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'RBIT');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f52 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'RBIT');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f53 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f54 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f55 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV16');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f56 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV16');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f57 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV32');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f58 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'REV32');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f59 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFIZ');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f60 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFIZ');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f61 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFX');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f62 = function(rd, src1, src2, src3) {
            const node = createNode('INSTRUCTION', 'BFX');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, src3);
            return node;
        };
  var peg$f63 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'SXTW');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f64 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'AND');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f65 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'AND');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f66 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ANDS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f67 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ANDS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f68 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'BIC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f69 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'BIC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f70 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'EON');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f71 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'EON');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f72 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ORR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f73 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ORR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f74 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'EOR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f75 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'EOR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f76 = function(rd, src) {
    const node = createNode('INSTRUCTION', 'MOV');
    const rdNode = createNode('DESTINATION', 'RD');
    const srcNode = createNode('SOURCE1', 'SRC1');
    addChild(rdNode, rd);
    addChild(srcNode, src);
    addChild(node, rdNode);
    addChild(node, srcNode);
    return node;
  };
  var peg$f77 = function(rd, src) {
    const node = createNode('INSTRUCTION', 'MOVK');
    const rdNode = createNode('DESTINATION', 'RD');
    const srcNode = createNode('SOURCE1', 'SRC1');
    addChild(rdNode, rd);
    addChild(srcNode, src);
    addChild(node, rdNode);
    addChild(node, srcNode);
    return node;
  };
  var peg$f78 = function(rd, src, src2) {
    const node = createNode('INSTRUCTION', 'MOVK');
    const rdNode = createNode('DESTINATION', 'RD');
    const srcNode = createNode('SOURCE1', 'SRC1');
    addChild(rdNode, rd);
    addChild(srcNode, src);
    addChild(node, rdNode);
    addChild(node, srcNode);
    addChild(node, src2);
    return node;
  };
  var peg$f79 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ORN');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f80 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ORN');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f81 = function(rd, src2) {
            const node = createNode('INSTRUCTION', 'TST');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            addChild(node, src2);
            return node;
        };
  var peg$f82 = function(rd, src2) {
            const node = createNode('INSTRUCTION', 'TST');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            addChild(node, src2);
            return node;
        };
  var peg$f83 = function(rd, src) {
        const node = createNode('INSTRUCTION', 'MOVN');
        const rdNode = createNode('DESTINATION', 'RD');
        const srcNode = createNode('SOURCE1', 'SRC1');
        addChild(rdNode, rd);
        addChild(srcNode, src);
        addChild(node, rdNode);
        addChild(node, srcNode);
        return node;
    };
  var peg$f84 = function(rd, src) {
        const node = createNode('INSTRUCTION', 'MOVZ');
        const rdNode = createNode('DESTINATION', 'RD');
        const srcNode = createNode('SOURCE1', 'SRC1');
        addChild(rdNode, rd);
        addChild(srcNode, src);
        addChild(node, rdNode);
        addChild(node, srcNode);
        return node;
    };
  var peg$f85 = function(i) {
        return i;
    };
  var peg$f86 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'LDRB');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f87 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'LDRB');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f88 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'LDR');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f89 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'LDR');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f90 = function(l) {
            l.value = '=' + l.value;
            return [l];
        };
  var peg$f91 = function(r, r2, s, i2) {
            return [r, r2, s, i2];
        };
  var peg$f92 = function(r, i, s, i2) {
            return [r, i, s, i2];
        };
  var peg$f93 = function(r, i, e) {
            return [r, i, e];
        };
  var peg$f94 = function(r, i) {
            return [r, i];
        };
  var peg$f95 = function(r) {
            return [r];
        };
  var peg$f96 = function(rd, rd2, src) {
            const node = createNode('INSTRUCTION', 'LDP');
            const rdNode = createNode('DESTINATION', 'RD');
            const rd2Node = createNode('DESTINATION', 'RD2');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(rd2Node, rd2);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, rd2Node);
            addChild(node, srcNode);
            return node;
        };
  var peg$f97 = function(rd, rd2, src) {
            const node = createNode('INSTRUCTION', 'LDP');
            const rdNode = createNode('DESTINATION', 'RD');
            const rd2Node = createNode('DESTINATION', 'RD2');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(rd2Node, rd2);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, rd2Node);
            addChild(node, srcNode);
            return node;
        };
  var peg$f98 = function(rd, rd2, src) {
            const node = createNode('INSTRUCTION', 'LDPSW');
            const rdNode = createNode('DESTINATION', 'RD');
            const rd2Node = createNode('DESTINATION', 'RD2');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(rd2Node, rd2);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, rd2Node);
            addChild(node, srcNode);
            return node;
        };
  var peg$f99 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'PRFM');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f100 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f101 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'CLR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f102 = function(rd, src1) {
            const node = createNode('INSTRUCTION', 'SET');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            return node;
        };
  var peg$f103 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'STR');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f104 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'STR');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f105 = function(r, r2, s, i2) {
            return [r, r2, s, i2];
        };
  var peg$f106 = function(r, i, s, i2) {
            return [r, i, s, i2];
        };
  var peg$f107 = function(r, i, e) {
            return [r, i, e];
        };
  var peg$f108 = function(r, i) {
            return [r, i];
        };
  var peg$f109 = function(r) {
            return [r];
        };
  var peg$f110 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'STRB');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f111 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'STRB');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f112 = function(rd, rd2, src) {
            const node = createNode('INSTRUCTION', 'STP');
            const rdNode = createNode('DESTINATION', 'RD');
            const rd2Node = createNode('DESTINATION', 'RD2');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(rd2Node, rd2);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, rd2Node);
            addChild(node, srcNode);
            return node;
        };
  var peg$f113 = function(rd, rd2, src) {
            const node = createNode('INSTRUCTION', 'STP');
            const rdNode = createNode('DESTINATION', 'RD');
            const rd2Node = createNode('DESTINATION', 'RD2');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(rd2Node, rd2);
            addChildren(srcNode, src);
            addChild(node, rdNode);
            addChild(node, rd2Node);
            addChild(node, srcNode);
            return node;
        };
  var peg$f114 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'MVN');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f115 = function(rd, src) {
            const node = createNode('INSTRUCTION', 'MVN');
            const rdNode = createNode('DESTINATION', 'RD');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(srcNode, src);
            addChild(node, rdNode);
            addChild(node, srcNode);
            return node;
        };
  var peg$f116 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LSL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f117 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LSL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f118 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LSR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f119 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LSR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f120 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ASR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f121 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ASR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f122 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ROR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f123 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'ROR');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f124 = function(src1, src2) {
            const node = createNode('INSTRUCTION', 'CMP');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f125 = function(src1, src2) {
            const node = createNode('INSTRUCTION', 'CMP');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f126 = function(l) {
            const node = createNode('INSTRUCTION', 'B');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f127 = function(l) {
            const node = createNode('INSTRUCTION', 'BLE');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f128 = function(l) {
            const node = createNode('INSTRUCTION', 'BL');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f129 = function(src) {
            const node = createNode('INSTRUCTION', 'BLR');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(srcNode, src);
            addChild(node, srcNode);
            return node;
        };
  var peg$f130 = function(src) {
            const node = createNode('INSTRUCTION', 'BR');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(srcNode, src);
            addChild(node, srcNode);
            return node;
        };
  var peg$f131 = function(src, l) {
            const node = createNode('INSTRUCTION', 'CBNZ');
            const srcNode = createNode('SOURCE1', 'SRC1');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(srcNode, src);
            addChild(labelNode, l);
            addChild(node, srcNode);
            addChild(node, labelNode);
            return node;
        };
  var peg$f132 = function(src, l) {
            const node = createNode('INSTRUCTION', 'CBZ');
            const srcNode = createNode('SOURCE1', 'SRC1');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(srcNode, src);
            addChild(labelNode, l);
            addChild(node, srcNode);
            addChild(node, labelNode);
            return node;
        };
  var peg$f133 = function() {
            const node = createNode('INSTRUCTION', 'RET');
            return node;
        };
  var peg$f134 = function(src, i, l) {
            const node = createNode('INSTRUCTION', 'TBNZ');
            const srcNode = createNode('SOURCE1', 'SRC1');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(srcNode, src);
            addChild(labelNode, l);
            addChild(node, srcNode);
            addChild(node, i);
            addChild(node, labelNode);
            return node;
        };
  var peg$f135 = function(src, i, l) {
            const node = createNode('INSTRUCTION', 'TBZ');
            const srcNode = createNode('SOURCE1', 'SRC1');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(srcNode, src);
            addChild(node, srcNode);
            addChild(node, i);
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f136 = function(l) {
            const node = createNode('INSTRUCTION', 'BEQ');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f137 = function(l) {
            const node = createNode('INSTRUCTION', 'BNE');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f138 = function(l) {
            const node = createNode('INSTRUCTION', 'BGT');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f139 = function(l) {
            const node = createNode('INSTRUCTION', 'BLT');
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f140 = function(i) {
            const node = createNode('INSTRUCTION', 'SVC');
            const srcNode = createNode('SOURCE1', 'SRC1');
            addChild(srcNode, i);
            addChild(node, srcNode);
            return node;
        };
  var peg$f141 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CAS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f142 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CAS');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f143 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SWP');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f144 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'SWP');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f145 = function(src1, src2, i, l) {
            const node = createNode('INSTRUCTION', 'CCMN');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, i);
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f146 = function(src1, src2, i, l) {
            const node = createNode('INSTRUCTION', 'CCMN');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, i);
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f147 = function(src1, src2, i, l) {
            const node = createNode('INSTRUCTION', 'CCMP');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, i);
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f148 = function(src1, src2, i, l) {
            const node = createNode('INSTRUCTION', 'CCMP');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(src1Node, src1);
            addChild(node, src1Node);
            addChild(node, src2);
            addChild(node, i);
            const labelNode = createNode('LABEL', 'LBL');
            addChild(labelNode, l);
            addChild(node, labelNode);
            return node;
        };
  var peg$f149 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CINC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f150 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CINC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f151 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CINV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f152 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CINV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f153 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f154 = function(rd, src1, condition) {
            const node = createNode('INSTRUCTION', 'CNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f155 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSEL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f156 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSEL');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f157 = function(rd, condition) {
            const node = createNode('INSTRUCTION', 'CSET');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f158 = function(rd, condition) {
            const node = createNode('INSTRUCTION', 'CSET');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f159 = function(rd, condition) {
            const node = createNode('INSTRUCTION', 'CSETM');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f160 = function(rd, condition) {
            const node = createNode('INSTRUCTION', 'CSETM');
            const rdNode = createNode('DESTINATION', 'RD');
            addChild(rdNode, rd);
            addChild(node, rdNode);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f161 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSINC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f162 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSINC');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f163 = function() {
            const node = createNode('CONDITION', 'EQ');
            return node;
        };
  var peg$f164 = function() {
            const node = createNode('CONDITION', 'NE');
            return node;
        };
  var peg$f165 = function() {
            const node = createNode('CONDITION', 'CS');
            return node;
        };
  var peg$f166 = function() {
            const node = createNode('CONDITION', 'CC');
            return node;
        };
  var peg$f167 = function() {
            const node = createNode('CONDITION', 'MI');
            return node;
        };
  var peg$f168 = function() {
            const node = createNode('CONDITION', 'PL');
            return node;
        };
  var peg$f169 = function() {
            const node = createNode('CONDITION', 'VS');
            return node;
        };
  var peg$f170 = function() {
            const node = createNode('CONDITION', 'VC');
            return node;
        };
  var peg$f171 = function() {
            const node = createNode('CONDITION', 'HI');
            return node;
        };
  var peg$f172 = function() {
            const node = createNode('CONDITION', 'LS');
            return node;
        };
  var peg$f173 = function() {
            const node = createNode('CONDITION', 'GE');
            return node;
        };
  var peg$f174 = function() {
            const node = createNode('CONDITION', 'LT');
            return node;
        };
  var peg$f175 = function() {
            const node = createNode('CONDITION', 'GT');
            return node;
        };
  var peg$f176 = function() {
            const node = createNode('CONDITION', 'LE');
            return node;
        };
  var peg$f177 = function() {
            const node = createNode('CONDITION', 'AL');
            return node;
        };
  var peg$f178 = function() {
            const node = createNode('CONDITION', 'NV');
            return node;
        };
  var peg$f179 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSINV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f180 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSINV');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f181 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f182 = function(rd, src1, src2, condition) {
            const node = createNode('INSTRUCTION', 'CSNEG');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            const conditionNode = createNode('CONDITION', 'COND');
            addChild(conditionNode, condition);
            addChild(node, conditionNode);
            return node;
        };
  var peg$f183 = function() {
            const node = createNode('RG_64_BITS', 'reg64');
            setValue(node, text());
            return node;
        };
  var peg$f184 = function() {
            const node = createNode('R_STACK_POINTER', 'SP');
            setValue(node, text());
            return node;
        };
  var peg$f185 = function() {
            const node = createNode('R_LINK_REGISTER', 'LR');
            setValue(node, text());
            return node;
        };
  var peg$f186 = function() {
            const node = createNode('R_ZERO_REGISTER', 'ZR');
            setValue(node, text());
            return node;
        };
  var peg$f187 = function() {
            const node = createNode('R_PROGRAM_COUNTER', 'PC');
            setValue(node, text());
            return node;
        };
  var peg$f188 = function() {
            const node = createNode('R_ZERO_REGISTER', 'ZR');
            setValue(node, text());
            return node;
        };
  var peg$f189 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CRC32B');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f190 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CRC32H');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f191 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CRC32W');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f192 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'CRC32X');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            const src2Node = createNode('SOURCE2', 'SRC2');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(src2Node, src2);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2Node);
            return node;
        };
  var peg$f193 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f194 = function(rd, src1, src2) {
            const node = createNode('INSTRUCTION', 'LD');
            const rdNode = createNode('DESTINATION', 'RD');
            const src1Node = createNode('SOURCE1', 'SRC1');
            addChild(rdNode, rd);
            addChild(src1Node, src1);
            addChild(node, rdNode);
            addChild(node, src1Node);
            addChild(node, src2);
            return node;
        };
  var peg$f195 = function() {
            const node = createNode('RG_32_BITS', 'reg32');
            setValue(node, text());
            return node;
        };
  var peg$f196 = function(r, ep) {
            const node = createNode('SOURCE2', 'SRC2');
            addChild(node, r);
            if(ep){
            addChild(node, ep);
            }
            return node;
        };
  var peg$f197 = function(r, lp) {
            const node = createNode('SOURCE2', 'SRC2');
            addChild(node, r);
            if(lp){
                addChild(node, lp[3]);
                addChild(node, lp[5]);
            }
            return node;
        };
  var peg$f198 = function(i) {
            const node = createNode('SOURCE2', 'SRC2');
            addChild(node, i);
            return node;
        };
  var peg$f199 = function(r, lp) {
            const node = createNode('SOURCE2', 'SRC2');
            addChild(node, r);
            if(lp){
                addChild(node, lp[3]);
                addChild(node, lp[5]);
            }
            return node;
        };
  var peg$f200 = function(i) {
            const node = createNode('SOURCE2', 'SRC2');
            addChild(node, i);
            return node;
        };
  var peg$f201 = function() {
            const node = createNode('LOGICAL_SHIFT_LEFT', 'LSL');
            setValue(node, text());
            return node;
        };
  var peg$f202 = function() {
            const node = createNode('LOGICAL_SHIFT_RIGHT', 'LSR');
            setValue(node, text());
            return node;
        };
  var peg$f203 = function() {
            const node = createNode('ARITHMETIC_SHIFT_RIGHT', 'ASR');
            setValue(node, text());
            return node;
        };
  var peg$f204 = function() {
            const node = createNode('UNSIGNED_EXTEND_BYTE', 'UXTB');
            setValue(node, text());
            return node;
        };
  var peg$f205 = function() {
            const node = createNode('UNSIGNED_EXTEND_HALFWORD', 'UXTH');
            setValue(node, text());
            return node;
        };
  var peg$f206 = function() {
            const node = createNode('UNSIGNED_EXTEND WORD', 'UXTW');
            setValue(node, text());
            return node;
        };
  var peg$f207 = function() {
            const node = createNode('UNSIGNED_EXTEND_DOUBLEWORD', 'UXTX');
            setValue(node, text());
            return node;
        };
  var peg$f208 = function() {
            const node = createNode('SIGNED_EXTEND_BYTE', 'SXTB');
            setValue(node, text());
            return node;
        };
  var peg$f209 = function() {
            const node = createNode('SIGNED_EXTEND_HALFWORD', 'SXTH');
            setValue(node, text());
            return node;
        };
  var peg$f210 = function() {
            const node = createNode('SIGNED_EXTEND_WORD', 'SXTW');
            setValue(node, text());
            return node;
        };
  var peg$f211 = function() {
            const node = createNode('SIGNED_EXTEND_DOUBLEWORD', 'SXTX');
            setValue(node, text());
            return node;
        };
  var peg$f212 = function() {
            const node = createNode('INMEDIATE_OP', 'Integer');
            setValue(node, text());
            return node;
        };
  var peg$f213 = function() {
            const node = createNode('INMEDIATE_OP', '#');
            setValue(node, text());
            return node;
        };
  var peg$f214 = function() {
            const node = createNode('INMEDIATE_OP', '#');
            setValue(node, text());
            return node;
        };
  var peg$f215 = function() {
            const node = createNode('INMEDIATE_OP', '#');
            setValue(node, text());
            return node;
        };
  var peg$f216 = function() {
            const node = createNode('INMEDIATE_OP', '#');
            setValue(node, text());
            return node;
        };
  var peg$f217 = function() {
            const node = createNode('INTEGER', 'Integer');
            setValue(node, text());
            return node;
        };
  var peg$f218 = function() {
            const node = createNode('LABEL', 'Label');
            setValue(node, text());
            return node;
        };
  var peg$f219 = function() {
        const node = createNode('STRING', 'String');
        setValue(node, text().slice(1, -1));
        return node;
    };
  var peg$f220 = function() {
            const node = createNode('EMPTY', 'Empty');
            return node;
        };
  var peg$f221 = function() {
            const node = createNode('COMMENT', 'Comment');
            setValue(node, text());
            return node;
        };
  var peg$f222 = function() {
            const node = createNode('COMMENT', 'Comment');
            setValue(node, text());
            return node;
        };
  var peg$f223 = function() {
            const node = createNode('COMMENT', 'Comment');
            setValue(node, text());
            return node;
        };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedirective();
    if (s2 === peg$FAILED) {
      s2 = peg$parsesection();
      if (s2 === peg$FAILED) {
        s2 = peg$parseinstruction();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment();
          if (s2 === peg$FAILED) {
            s2 = peg$parsemcomment();
            if (s2 === peg$FAILED) {
              s2 = peg$parseblank_line();
            }
          }
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsedirective();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesection();
        if (s2 === peg$FAILED) {
          s2 = peg$parseinstruction();
          if (s2 === peg$FAILED) {
            s2 = peg$parsecomment();
            if (s2 === peg$FAILED) {
              s2 = peg$parsemcomment();
              if (s2 === peg$FAILED) {
                s2 = peg$parseblank_line();
              }
            }
          }
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f0(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsedirective() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsedirective_p();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsedirective_p();
      if (s4 === peg$FAILED) {
        s4 = peg$parselabel();
        if (s4 === peg$FAILED) {
          s4 = peg$parsestring();
          if (s4 === peg$FAILED) {
            s4 = peg$parseexpression();
          }
        }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s6 = peg$parsecomment();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s7 = peg$c0;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s7 === peg$FAILED) {
        s7 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f1(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_p() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedirective_name();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirective_name() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c3) {
        s0 = peg$c3;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c4) {
          s0 = peg$c4;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c5) {
            s0 = peg$c5;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e5); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c6) {
              s0 = peg$c6;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c7) {
                s0 = peg$c7;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e7); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c8) {
                  s0 = peg$c8;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e8); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c9) {
                    s0 = peg$c9;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c10) {
                      s0 = peg$c10;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e10); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c11) {
                        s0 = peg$c11;
                        peg$currPos += 4;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e11); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c12) {
                          s0 = peg$c12;
                          peg$currPos += 6;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e12); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c13) {
                            s0 = peg$c13;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e13); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c14) {
                              s0 = peg$c14;
                              peg$currPos += 5;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e14); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c15) {
                                s0 = peg$c15;
                                peg$currPos += 4;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e15); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c16) {
                                  s0 = peg$c16;
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3) === peg$c17) {
                                    s0 = peg$c17;
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e17); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c18) {
                                      s0 = peg$c18;
                                      peg$currPos += 3;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e18); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c19) {
                                        s0 = peg$c19;
                                        peg$currPos += 3;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e19); }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesection() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parselabel();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c20;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstruction() {
    var s0;

    s0 = peg$parseadd_inst();
    if (s0 === peg$FAILED) {
      s0 = peg$parseadc_inst();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesub_inst();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemul_inst();
          if (s0 === peg$FAILED) {
            s0 = peg$parsediv_inst();
            if (s0 === peg$FAILED) {
              s0 = peg$parseudiv_inst();
              if (s0 === peg$FAILED) {
                s0 = peg$parsesdiv_inst();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseands_inst();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseand_inst();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseorr_inst();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseeor_inst();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsemov_inst();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsemvn_inst();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseldrb_inst();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseldr_inst();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseldp_inst();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsestrb_inst();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsestr_inst();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsestp_inst();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parselsl_inst();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parselsr_inst();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseasr_inst();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseror_inst();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsecmp_inst();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsebeq_inst();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsebne_inst();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsebgt_inst();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseblt_inst();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseble_inst();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsebl_inst();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseb_inst();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseret_inst();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsesvc_inst();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsemadd_inst();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsemneg_inst();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsemsub_inst();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsengc_inst();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsesbc_inst();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsesmaddl_inst();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parsecmn_inst();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parsesmnegl_inst();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parsesmsubl_inst();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parsesmulh_inst();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parsesmull_inst();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseumaddl_inst();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseumnegl_inst();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseumsubl_inst();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseumulh_inst();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseumull_inst();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parsebfi_inst();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parsebfxil_inst();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parsecls_inst();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseclz_inst();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parserev_inst();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parserev16_inst();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parserev32_inst();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parserbit_inst();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseextr_inst();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parsesxtw_inst();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parsemovk_inst();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parsemovn_inst();
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$parsemovz_inst();
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$parsebic_inst();
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$parseeon_inst();
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$parsetst_inst();
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$parsecbz_inst();
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$parsecbnz_inst();
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                          s0 = peg$parsetbz_inst();
                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                            s0 = peg$parsetbnz_inst();
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                              s0 = peg$parsecas_inst();
                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                s0 = peg$parseswp_inst();
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                  s0 = peg$parseccmn_inst();
                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                    s0 = peg$parseccmp_inst();
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                      s0 = peg$parsecsel_inst();
                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                        s0 = peg$parsecinc_inst();
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                          s0 = peg$parsecinv_inst();
                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                            s0 = peg$parsecset_inst();
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                              s0 = peg$parsecsetm_inst();
                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                s0 = peg$parsecsinc_inst();
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                  s0 = peg$parsecsinv_inst();
                                                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                                                    s0 = peg$parsecsneg_inst();
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                      s0 = peg$parseldp_inst();
                                                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                                                        s0 = peg$parseldpsw_inst();
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                          s0 = peg$parseclr_inst();
                                                                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                                                                            s0 = peg$parseset_inst();
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                              s0 = peg$parsecrc32_inst();
                                                                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                                                                s0 = peg$parseuxt_inst();
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseuxt_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c21) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f4(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmulh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c23) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f5(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmull_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c24) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f6(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumaddl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c25) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f7(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumnegl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c26) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = [];
                s15 = peg$parse_();
                while (s15 !== peg$FAILED) {
                  s14.push(s15);
                  s15 = peg$parse_();
                }
                s15 = peg$parsecomment();
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s16 = peg$c0;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f8(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumsubl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c27) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f9(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumulh_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c28) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f10(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseumull_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c29) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f11(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c30) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f12(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c30) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f13(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseadc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c31) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f14(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c31) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f15(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parsecmn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c32) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f16(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c32) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f17(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parsemadd_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c33) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f18(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c33) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f19(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c34) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f20(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c34) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f21(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemsub_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c35) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f22(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c35) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f23(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsengc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c36) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f24(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c36) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f25(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesbc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c37) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f26(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c37) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f27(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesmaddl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c38) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f28(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmnegl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c39) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = [];
                s15 = peg$parse_();
                while (s15 !== peg$FAILED) {
                  s14.push(s15);
                  s15 = peg$parse_();
                }
                s15 = peg$parsecomment();
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s16 = peg$c0;
                  peg$currPos++;
                } else {
                  s16 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f29(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmsubl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 6);
    if (s2.toLowerCase() === peg$c40) {
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand32();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f30(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesub_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c41) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f31(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c41) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f32(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemul_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c42) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f33(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c42) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f34(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsediv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c43) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f35(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c43) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f36(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseudiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c44) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f37(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c44) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f38(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesdiv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c45) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f39(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c45) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f40(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebfi_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c46) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f41(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c46) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f42(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebfxil_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c47) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f43(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c47) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f44(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecls_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c48) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f45(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c48) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f46(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseclz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c49) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f47(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c49) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f48(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseextr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c50) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f49(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c50) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f50(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserbit_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c51) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f51(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c51) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f52(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserev_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c52) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f53(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c52) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f54(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserev16_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c53) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f55(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c53) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f56(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parserev32_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c54) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f57(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c54) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f58(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebfiz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c55) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f59(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c55) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f60(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebfx_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c56) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parseoperand64();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f61(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c56) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parseoperand32();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f62(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesxtw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c57) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg32();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f63(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseand_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c58) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f64(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c58) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f65(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseands_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c59) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f66(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c59) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f67(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebic_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c60) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f68(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c60) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f69(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseeon_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c61) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f70(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c61) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f71(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseorr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c62) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f72(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c62) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f73(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseeor_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c63) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f74(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c63) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f75(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemov_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c64) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemov_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f76(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parsemovk_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c65) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemovk_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f77(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c65) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg64_or_reg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsemovk_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsemovk_source();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f78(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }

    return s0;
  }

  function peg$parseorn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c66) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f79(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c66) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f80(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetst_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c67) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f81(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c67) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f82(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemovn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c68) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemovk_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f83(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemovz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c69) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemovk_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f84(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemovk_source() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseimmediate();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f85(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereg64_or_reg32() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsereg64();
    if (s0 === peg$FAILED) {
      s0 = peg$parsereg32();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }

    return s0;
  }

  function peg$parsemov_source() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parsereg64_or_reg32();
    if (s0 === peg$FAILED) {
      s0 = peg$parseimmediate();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }

    return s0;
  }

  function peg$parseldrb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c71) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseldr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f86(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c71) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseldr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f87(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }

    return s0;
  }

  function peg$parseldr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c72) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseldr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f88(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c72) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e81); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseldr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f89(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }

    return s0;
  }

  function peg$parseldr_source() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c73;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselabel();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f90(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c74;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        s3 = peg$parsereg64_or_reg32();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c22;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = peg$parsereg64_or_reg32();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c22;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parse_();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parse_();
                }
                s11 = peg$parseshift_op();
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  s13 = peg$parse_();
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$parse_();
                  }
                  s13 = peg$parseimmediate();
                  if (s13 !== peg$FAILED) {
                    s14 = [];
                    s15 = peg$parse_();
                    while (s15 !== peg$FAILED) {
                      s14.push(s15);
                      s15 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s15 = peg$c75;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e84); }
                    }
                    if (s15 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f91(s3, s7, s11, s13);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c74;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$parsereg64();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c22;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = peg$parseoperand64();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse_();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c22;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parse_();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parse_();
                  }
                  s11 = peg$parseshift_op();
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parse_();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parse_();
                    }
                    s13 = peg$parseimmediate();
                    if (s13 !== peg$FAILED) {
                      s14 = [];
                      s15 = peg$parse_();
                      while (s15 !== peg$FAILED) {
                        s14.push(s15);
                        s15 = peg$parse_();
                      }
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s15 = peg$c75;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e84); }
                      }
                      if (s15 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f92(s3, s7, s11, s13);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c74;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e83); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$parsereg64();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                s7 = peg$parseoperand64();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c22;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$parse_();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parse_();
                    }
                    s11 = peg$parseextend_op();
                    if (s11 !== peg$FAILED) {
                      s12 = [];
                      s13 = peg$parse_();
                      while (s13 !== peg$FAILED) {
                        s12.push(s13);
                        s13 = peg$parse_();
                      }
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s13 = peg$c75;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e84); }
                      }
                      if (s13 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f93(s3, s7, s11);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c74;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e83); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsereg64();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse_();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c22;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parse_();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parse_();
                  }
                  s7 = peg$parseoperand64();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parse_();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c75;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e84); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f94(s3, s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c74;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e83); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parse_();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parse_();
                }
                s3 = peg$parsereg64();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parse_();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c75;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e84); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f95(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseldp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c76) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseldr_source();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f96(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c76) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseldr_source();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f97(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }

    return s0;
  }

  function peg$parseldpsw_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c77) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseldr_source();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f98(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprfm_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c78) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseldr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f99(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseclr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c79) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e89); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f100(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c79) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f101(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseset_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c17) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f102(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c80) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsestr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f103(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c80) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsestr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f104(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }

    return s0;
  }

  function peg$parsestr_source() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c74;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      s3 = peg$parsereg64_or_reg32();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parse_();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_();
          }
          s7 = peg$parsereg64_or_reg32();
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = peg$parse_();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s9 = peg$c22;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s9 !== peg$FAILED) {
              s10 = [];
              s11 = peg$parse_();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parse_();
              }
              s11 = peg$parseshift_op();
              if (s11 !== peg$FAILED) {
                s12 = [];
                s13 = peg$parse_();
                while (s13 !== peg$FAILED) {
                  s12.push(s13);
                  s13 = peg$parse_();
                }
                s13 = peg$parseimmediate();
                if (s13 !== peg$FAILED) {
                  s14 = [];
                  s15 = peg$parse_();
                  while (s15 !== peg$FAILED) {
                    s14.push(s15);
                    s15 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s15 = peg$c75;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e84); }
                  }
                  if (s15 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f105(s3, s7, s11, s13);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c74;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_();
        }
        s3 = peg$parsereg64();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c22;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parse_();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_();
            }
            s7 = peg$parseoperand64();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parse_();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c22;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s9 !== peg$FAILED) {
                s10 = [];
                s11 = peg$parse_();
                while (s11 !== peg$FAILED) {
                  s10.push(s11);
                  s11 = peg$parse_();
                }
                s11 = peg$parseshift_op();
                if (s11 !== peg$FAILED) {
                  s12 = [];
                  s13 = peg$parse_();
                  while (s13 !== peg$FAILED) {
                    s12.push(s13);
                    s13 = peg$parse_();
                  }
                  s13 = peg$parseimmediate();
                  if (s13 !== peg$FAILED) {
                    s14 = [];
                    s15 = peg$parse_();
                    while (s15 !== peg$FAILED) {
                      s14.push(s15);
                      s15 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s15 = peg$c75;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e84); }
                    }
                    if (s15 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f106(s3, s7, s11, s13);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c74;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$parsereg64();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c22;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              s7 = peg$parseoperand64();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parse_();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c22;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$parse_();
                  while (s11 !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$parse_();
                  }
                  s11 = peg$parseextend_op();
                  if (s11 !== peg$FAILED) {
                    s12 = [];
                    s13 = peg$parse_();
                    while (s13 !== peg$FAILED) {
                      s12.push(s13);
                      s13 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s13 = peg$c75;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e84); }
                    }
                    if (s13 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f107(s3, s7, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c74;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e83); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parse_();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parse_();
            }
            s3 = peg$parsereg64();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parse_();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parse_();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parse_();
                }
                s7 = peg$parseoperand64();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c75;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e84); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f108(s3, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c74;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e83); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parse_();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parse_();
              }
              s3 = peg$parsereg64();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parse_();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c75;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e84); }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f109(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestrb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c81) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsestr_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f110(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c81) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsestr_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f111(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e93); }
    }

    return s0;
  }

  function peg$parsestp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c82) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parsestr_source();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f112(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c82) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsestr_source();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f113(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }

    return s0;
  }

  function peg$parsemvn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c83) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsemov_source();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f114(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c83) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsemov_source();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f115(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }

    return s0;
  }

  function peg$parselsl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c84) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f116(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c84) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f117(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parselsr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c85) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e102); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f118(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c85) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f119(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }

    return s0;
  }

  function peg$parseasr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c86) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f120(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c86) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e104); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f121(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }

    return s0;
  }

  function peg$parseror_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c87) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f122(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c87) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e106); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f123(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }

    return s0;
  }

  function peg$parsecmp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c88) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f124(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c88) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e108); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f125(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }

    return s0;
  }

  function peg$parseb_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.charAt(peg$currPos);
    if (s2.toLowerCase() === peg$c89) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f126(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e109); }
    }

    return s0;
  }

  function peg$parseble_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c90) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f127(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }

    return s0;
  }

  function peg$parsebl_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c91) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f128(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }

    return s0;
  }

  function peg$parseblr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c92) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f129(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }

    return s0;
  }

  function peg$parsebr_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c93) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f130(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parsecbnz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c94) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parselabel();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f131(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecbz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c95) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e120); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parselabel();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f132(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseret_inst() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c96) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsecomment();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f133();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parsetbnz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c97) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseimmediate();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parselabel();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f134(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetbz_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c98) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64_or_reg32();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseimmediate();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parselabel();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f135(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebeq_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c99) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f136(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parsebne_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c100) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f137(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }

    return s0;
  }

  function peg$parsebgt_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c101) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f138(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e129); }
    }

    return s0;
  }

  function peg$parseblt_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c102) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parselabel();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f139(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parsesvc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c103) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parseimmediate();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsecomment();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        if (input.charCodeAt(peg$currPos) === 10) {
          s7 = peg$c0;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f140(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parsecas_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c104) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c105) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c106) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s6 = peg$parsereg64();
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parse_();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c22;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = peg$parse_();
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$parse_();
          }
          s10 = peg$parsereg64();
          if (s10 !== peg$FAILED) {
            s11 = [];
            s12 = peg$parse_();
            while (s12 !== peg$FAILED) {
              s11.push(s12);
              s12 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s12 = peg$c22;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s12 !== peg$FAILED) {
              s13 = [];
              s14 = peg$parse_();
              while (s14 !== peg$FAILED) {
                s13.push(s14);
                s14 = peg$parse_();
              }
              s14 = peg$parsereg64();
              if (s14 !== peg$FAILED) {
                s15 = [];
                s16 = peg$parse_();
                while (s16 !== peg$FAILED) {
                  s15.push(s16);
                  s16 = peg$parse_();
                }
                s16 = peg$parsecomment();
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s17 = peg$c0;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s17 === peg$FAILED) {
                  s17 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f141(s6, s10, s14);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c104) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e135); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c105) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e136); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c106) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsereg32();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c22;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsereg32();
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s12 = peg$c22;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsereg32();
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecomment();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s17 = peg$c0;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s17 === peg$FAILED) {
                    s17 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f142(s6, s10, s14);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseswp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 3);
    if (s2.toLowerCase() === peg$c107) {
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c105) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e136); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c106) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e137); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = [];
      s6 = peg$parse_();
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parse_();
      }
      s6 = peg$parsereg64();
      if (s6 !== peg$FAILED) {
        s7 = [];
        s8 = peg$parse_();
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c22;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = peg$parse_();
          while (s10 !== peg$FAILED) {
            s9.push(s10);
            s10 = peg$parse_();
          }
          s10 = peg$parsereg64();
          if (s10 !== peg$FAILED) {
            s11 = [];
            s12 = peg$parse_();
            while (s12 !== peg$FAILED) {
              s11.push(s12);
              s12 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s12 = peg$c22;
              peg$currPos++;
            } else {
              s12 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s12 !== peg$FAILED) {
              s13 = [];
              s14 = peg$parse_();
              while (s14 !== peg$FAILED) {
                s13.push(s14);
                s14 = peg$parse_();
              }
              s14 = peg$parsereg64();
              if (s14 !== peg$FAILED) {
                s15 = [];
                s16 = peg$parse_();
                while (s16 !== peg$FAILED) {
                  s15.push(s16);
                  s16 = peg$parse_();
                }
                s16 = peg$parsecomment();
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s17 = peg$c0;
                  peg$currPos++;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s17 === peg$FAILED) {
                  s17 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f143(s6, s10, s14);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 3);
      if (s2.toLowerCase() === peg$c107) {
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c105) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e136); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c106) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e137); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsereg32();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c22;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsereg32();
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s12 = peg$c22;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsereg32();
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecomment();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s17 = peg$c0;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s17 === peg$FAILED) {
                    s17 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f144(s6, s10, s14);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseccmn_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c108) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseimmediate();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parselabel();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f145(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c108) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e139); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseimmediate();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parselabel();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f146(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseccmp_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c109) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseoperand64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseimmediate();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parselabel();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f147(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c109) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e140); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseoperand32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseimmediate();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parselabel();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f148(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecinc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c110) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parsecondition_inst();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f149(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c110) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e141); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecondition_inst();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f150(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecinv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c111) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parsecondition_inst();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f151(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c111) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e142); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecondition_inst();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f152(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c112) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parsecondition_inst();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f153(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c112) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e143); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parsecondition_inst();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f154(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecsel_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c113) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecondition_inst();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f155(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c113) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e144); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parsecondition_inst();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f156(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecset_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 4);
    if (s2.toLowerCase() === peg$c114) {
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e145); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsecondition_inst();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f157(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 4);
      if (s2.toLowerCase() === peg$c114) {
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e145); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsecondition_inst();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f158(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecsetm_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c115) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e146); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsecondition_inst();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsecomment();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
              s11 = peg$c0;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f159(s4, s8);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c115) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e146); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsecondition_inst();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsecomment();
              if (s10 === peg$FAILED) {
                s10 = null;
              }
              if (input.charCodeAt(peg$currPos) === 10) {
                s11 = peg$c0;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f160(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecsinc_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c116) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecondition_inst();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f161(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c116) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e147); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parsecondition_inst();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f162(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecondition_inst() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 2);
    if (s1.toLowerCase() === peg$c117) {
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f163();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c118) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e149); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f164();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c119) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e150); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f165();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c120) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e151); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f166();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 2);
            if (s1.toLowerCase() === peg$c121) {
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e152); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f167();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 2);
              if (s1.toLowerCase() === peg$c122) {
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e153); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f168();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 2);
                if (s1.toLowerCase() === peg$c123) {
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e154); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f169();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 2);
                  if (s1.toLowerCase() === peg$c124) {
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e155); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f170();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = input.substr(peg$currPos, 2);
                    if (s1.toLowerCase() === peg$c125) {
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e156); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f171();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = input.substr(peg$currPos, 2);
                      if (s1.toLowerCase() === peg$c126) {
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e157); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f172();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = input.substr(peg$currPos, 2);
                        if (s1.toLowerCase() === peg$c127) {
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e158); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f173();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = input.substr(peg$currPos, 2);
                          if (s1.toLowerCase() === peg$c128) {
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e159); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$f174();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = input.substr(peg$currPos, 2);
                            if (s1.toLowerCase() === peg$c129) {
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e160); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$f175();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = input.substr(peg$currPos, 2);
                              if (s1.toLowerCase() === peg$c130) {
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e161); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$f176();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = input.substr(peg$currPos, 2);
                                if (s1.toLowerCase() === peg$c131) {
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e162); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$f177();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = input.substr(peg$currPos, 2);
                                  if (s1.toLowerCase() === peg$c132) {
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e163); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$f178();
                                  }
                                  s0 = s1;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecsinv_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c133) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecondition_inst();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f179(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c133) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e164); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parsecondition_inst();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f180(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecsneg_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c134) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s14 = peg$c22;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecondition_inst();
                  if (s16 !== peg$FAILED) {
                    s17 = [];
                    s18 = peg$parse_();
                    while (s18 !== peg$FAILED) {
                      s17.push(s18);
                      s18 = peg$parse_();
                    }
                    s18 = peg$parsecomment();
                    if (s18 === peg$FAILED) {
                      s18 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s19 = peg$c0;
                      peg$currPos++;
                    } else {
                      s19 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s19 === peg$FAILED) {
                      s19 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f181(s4, s8, s12, s16);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c134) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e165); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand32();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s14 = peg$c22;
                    peg$currPos++;
                  } else {
                    s14 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parsecondition_inst();
                    if (s16 !== peg$FAILED) {
                      s17 = [];
                      s18 = peg$parse_();
                      while (s18 !== peg$FAILED) {
                        s17.push(s18);
                        s18 = peg$parse_();
                      }
                      s18 = peg$parsecomment();
                      if (s18 === peg$FAILED) {
                        s18 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s19 = peg$c0;
                        peg$currPos++;
                      } else {
                        s19 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s19 === peg$FAILED) {
                        s19 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f182(s4, s8, s12, s16);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsereg64() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c135) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s2 = peg$c136;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e168); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e169); }
        }
        if (s3 !== peg$FAILED) {
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r1.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f183();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 2);
      if (s1.toLowerCase() === peg$c137) {
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e171); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f184();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c138) {
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e172); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f185();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 2);
          if (s1.toLowerCase() === peg$c139) {
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e173); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f186();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 2);
            if (s1.toLowerCase() === peg$c140) {
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e174); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f187();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 3);
              if (s1.toLowerCase() === peg$c141) {
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e175); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f188();
              }
              s0 = s1;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }

    return s0;
  }

  function peg$parsecrc32_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 5);
    if (s2.toLowerCase() === peg$c142) {
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (s3.toLowerCase() === peg$c143) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e177); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = input.charAt(peg$currPos);
      if (s4.toLowerCase() === peg$c89) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parsereg32();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c22;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            s10 = peg$parsereg32();
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s12 = peg$c22;
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsereg32();
                if (s14 !== peg$FAILED) {
                  s15 = [];
                  s16 = peg$parse_();
                  while (s16 !== peg$FAILED) {
                    s15.push(s16);
                    s16 = peg$parse_();
                  }
                  s16 = peg$parsecomment();
                  if (s16 === peg$FAILED) {
                    s16 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s17 = peg$c0;
                    peg$currPos++;
                  } else {
                    s17 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s17 === peg$FAILED) {
                    s17 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f189(s6, s10, s14);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 5);
      if (s2.toLowerCase() === peg$c142) {
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e176); }
      }
      if (s2 !== peg$FAILED) {
        s3 = input.charAt(peg$currPos);
        if (s3.toLowerCase() === peg$c143) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e177); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = input.charAt(peg$currPos);
        if (s4.toLowerCase() === peg$c144) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e178); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          s6 = peg$parsereg32();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c22;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              s10 = peg$parsereg32();
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s12 = peg$c22;
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsereg32();
                  if (s14 !== peg$FAILED) {
                    s15 = [];
                    s16 = peg$parse_();
                    while (s16 !== peg$FAILED) {
                      s15.push(s16);
                      s16 = peg$parse_();
                    }
                    s16 = peg$parsecomment();
                    if (s16 === peg$FAILED) {
                      s16 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s17 = peg$c0;
                      peg$currPos++;
                    } else {
                      s17 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e0); }
                    }
                    if (s17 === peg$FAILED) {
                      s17 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f190(s6, s10, s14);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        s2 = input.substr(peg$currPos, 5);
        if (s2.toLowerCase() === peg$c142) {
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e176); }
        }
        if (s2 !== peg$FAILED) {
          s3 = input.charAt(peg$currPos);
          if (s3.toLowerCase() === peg$c143) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e177); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = input.charAt(peg$currPos);
          if (s4.toLowerCase() === peg$c145) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e179); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            s6 = peg$parsereg32();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parse_();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c22;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parse_();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parse_();
                }
                s10 = peg$parsereg32();
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parse_();
                  while (s12 !== peg$FAILED) {
                    s11.push(s12);
                    s12 = peg$parse_();
                  }
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s12 = peg$c22;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = [];
                    s14 = peg$parse_();
                    while (s14 !== peg$FAILED) {
                      s13.push(s14);
                      s14 = peg$parse_();
                    }
                    s14 = peg$parsereg32();
                    if (s14 !== peg$FAILED) {
                      s15 = [];
                      s16 = peg$parse_();
                      while (s16 !== peg$FAILED) {
                        s15.push(s16);
                        s16 = peg$parse_();
                      }
                      s16 = peg$parsecomment();
                      if (s16 === peg$FAILED) {
                        s16 = null;
                      }
                      if (input.charCodeAt(peg$currPos) === 10) {
                        s17 = peg$c0;
                        peg$currPos++;
                      } else {
                        s17 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e0); }
                      }
                      if (s17 === peg$FAILED) {
                        s17 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f191(s6, s10, s14);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parse_();
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
          s2 = input.substr(peg$currPos, 5);
          if (s2.toLowerCase() === peg$c142) {
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e176); }
          }
          if (s2 !== peg$FAILED) {
            s3 = input.charAt(peg$currPos);
            if (s3.toLowerCase() === peg$c143) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e177); }
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = input.charAt(peg$currPos);
            if (s4.toLowerCase() === peg$c135) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e180); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parse_();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parse_();
              }
              s6 = peg$parsereg32();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c22;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e22); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$parse_();
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$parse_();
                  }
                  s10 = peg$parsereg32();
                  if (s10 !== peg$FAILED) {
                    s11 = [];
                    s12 = peg$parse_();
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parse_();
                    }
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s12 = peg$c22;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e22); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = [];
                      s14 = peg$parse_();
                      while (s14 !== peg$FAILED) {
                        s13.push(s14);
                        s14 = peg$parse_();
                      }
                      s14 = peg$parsereg64();
                      if (s14 !== peg$FAILED) {
                        s15 = [];
                        s16 = peg$parse_();
                        while (s16 !== peg$FAILED) {
                          s15.push(s16);
                          s16 = peg$parse_();
                        }
                        s16 = peg$parsecomment();
                        if (s16 === peg$FAILED) {
                          s16 = null;
                        }
                        if (input.charCodeAt(peg$currPos) === 10) {
                          s17 = peg$c0;
                          peg$currPos++;
                        } else {
                          s17 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e0); }
                        }
                        if (s17 === peg$FAILED) {
                          s17 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f192(s6, s10, s14);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseld_inst() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = input.substr(peg$currPos, 2);
    if (s2.toLowerCase() === peg$c146) {
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e181); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      s4 = peg$parsereg64();
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c22;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parsereg64();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parse_();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parse_();
            }
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c22;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s10 !== peg$FAILED) {
              s11 = [];
              s12 = peg$parse_();
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = peg$parse_();
              }
              s12 = peg$parseoperand64();
              if (s12 !== peg$FAILED) {
                s13 = [];
                s14 = peg$parse_();
                while (s14 !== peg$FAILED) {
                  s13.push(s14);
                  s14 = peg$parse_();
                }
                s14 = peg$parsecomment();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                if (input.charCodeAt(peg$currPos) === 10) {
                  s15 = peg$c0;
                  peg$currPos++;
                } else {
                  s15 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e0); }
                }
                if (s15 === peg$FAILED) {
                  s15 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f193(s4, s8, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parse_();
      }
      s2 = input.substr(peg$currPos, 2);
      if (s2.toLowerCase() === peg$c146) {
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        s4 = peg$parsereg32();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c22;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parsereg32();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parse_();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parse_();
              }
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c22;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s10 !== peg$FAILED) {
                s11 = [];
                s12 = peg$parse_();
                while (s12 !== peg$FAILED) {
                  s11.push(s12);
                  s12 = peg$parse_();
                }
                s12 = peg$parseoperand64();
                if (s12 !== peg$FAILED) {
                  s13 = [];
                  s14 = peg$parse_();
                  while (s14 !== peg$FAILED) {
                    s13.push(s14);
                    s14 = peg$parse_();
                  }
                  s14 = peg$parsecomment();
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 10) {
                    s15 = peg$c0;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e0); }
                  }
                  if (s15 === peg$FAILED) {
                    s15 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f194(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsereg32() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (s1.toLowerCase() === peg$c145) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c136) {
        s2 = peg$c136;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e168); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e169); }
        }
        if (s3 !== peg$FAILED) {
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r1.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e170); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f195();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseoperand64() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg64();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c22;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parse_();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parse_();
        }
        s5 = peg$parseextend_op();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f196(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsereg64();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c22;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          s6 = peg$parseshift_op();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_();
            }
            s8 = peg$parseimmediate();
            if (s8 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6, s7, s8];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f197(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseimmediate();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f198(s1);
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }

    return s0;
  }

  function peg$parseoperand32() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsereg32();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parse_();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parse_();
      }
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c22;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_();
        }
        s6 = peg$parseshift_op();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parse_();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parse_();
          }
          s8 = peg$parseimmediate();
          if (s8 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6, s7, s8];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f199(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseimmediate();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f200(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parseshift_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 3);
    if (s1.toLowerCase() === peg$c84) {
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f201();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 3);
      if (s1.toLowerCase() === peg$c85) {
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f202();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 3);
        if (s1.toLowerCase() === peg$c86) {
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f203();
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

    return s0;
  }

  function peg$parseextend_op() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.substr(peg$currPos, 4);
    if (s1.toLowerCase() === peg$c21) {
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f204();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = input.substr(peg$currPos, 4);
      if (s1.toLowerCase() === peg$c147) {
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e188); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f205();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c148) {
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e189); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f206();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = input.substr(peg$currPos, 4);
          if (s1.toLowerCase() === peg$c149) {
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e190); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f207();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 4);
            if (s1.toLowerCase() === peg$c150) {
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e191); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f208();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = input.substr(peg$currPos, 4);
              if (s1.toLowerCase() === peg$c151) {
                peg$currPos += 4;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e192); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f209();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = input.substr(peg$currPos, 4);
                if (s1.toLowerCase() === peg$c57) {
                  peg$currPos += 4;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e60); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f210();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = input.substr(peg$currPos, 4);
                  if (s1.toLowerCase() === peg$c152) {
                    peg$currPos += 4;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e193); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f211();
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e187); }
    }

    return s0;
  }

  function peg$parseimmediate() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseinteger();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f212();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e75); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c153;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e196); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseletter();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c153;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e196); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f213();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c70;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e75); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (input.substr(peg$currPos, 2) === peg$c154) {
          s2 = peg$c154;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e197); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsehex_literal();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f214();
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c70;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e75); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (input.substr(peg$currPos, 2) === peg$c155) {
            s2 = peg$c155;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e198); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsebinary_literal();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f215();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
              s1 = peg$c70;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e75); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseinteger();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f216();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }

    return s0;
  }

  function peg$parsebinary_literal() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e199); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r3.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehex_literal() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r4.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r4.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e200); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseletter() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r5.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e201); }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parselabel();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f217();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }

    return s0;
  }

  function peg$parselabel() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r6.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e205); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e205); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f218();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r1.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r1.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e170); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e206); }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c156;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r8.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e209); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r8.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e209); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c156;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e208); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f219();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parseblank_line() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    s2 = peg$parsecomment();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s3 = peg$c0;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f220();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c157) {
      s2 = peg$c157;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r9.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e213); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r9.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e213); }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f221();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c158;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e214); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r9.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e213); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r9.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e213); }
          }
        }
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f222();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }

    return s0;
  }

  function peg$parsemcomment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e216); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r10.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e217); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r11.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e218); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = input.charAt(peg$currPos);
            if (peg$r11.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e218); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r12.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e219); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r10.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e217); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = input.charAt(peg$currPos);
          if (peg$r11.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e218); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = input.charAt(peg$currPos);
              if (peg$r11.test(s5)) {
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e218); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = input.charAt(peg$currPos);
            if (peg$r12.test(s5)) {
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e219); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c160) {
        s3 = peg$c160;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e220); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f223();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r13.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e222); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r13.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e222); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e221); }
    }

    return s0;
  }


    // Arreglo para descomponer operaciones 
    // Tipo: MSUB se descompone en SUB, MUL
    // MADD se descompone en ADD, MUL
    const operations = [
        { operation: 'MSUB', type:'arithmetic', decompose: ['SUB', 'MUL'] },
        { operation: 'MADD', type:'arithmetic', decompose: ['ADD', 'MUL'] },
        { operation: 'MNEG', type:'arithmetic', decompose: ['NEG', 'MUL'] },
        { operation: 'SMADDL', type:'arithmetic', decompose: ['ADD', 'MUL'] },
        { operation: 'SMNEGL', type:'arithmetic', decompose: ['NEG', 'MUL'] },
        { operation: 'SMSUBL', type:'arithmetic', decompose: ['SUB', 'MUL'] },
        { operation: 'UMADDL', type:'arithmetic', decompose: ['ADD', 'MUL'] },
        { operation: 'UMNEGL', type:'arithmetic', decompose: ['NEG', 'MUL'] },
        { operation: 'UMSUBL', type:'arithmetic', decompose: ['SUB', 'MUL'] },
        { operation: 'CSEL', type:'conditional', decompose: ['MOV', 'MOV', 'CMP'] },
        { operation: 'CINC', type:'conditional', decompose: ['ADD', 'MOV', 'CMP'] },
        { operation: 'CSINC', type:'conditional', decompose: ['ADD', 'MOV', 'CMP'] },
        { operation: 'CSINV', type:'conditional', decompose: ['NEG', 'NEG', 'CMP'] },
        { operation: 'CSNEG', type:'conditional', decompose: ['MOV', 'NEG', 'CMP'] }
    ];
    // Clase para representar un nodo del árbol de sintaxis concreto "CST"
    class ASTnode{
        constructor(type, value, children = []){
            this.type = type;
            this.value = value;
            this.children = children;
            this.id = ASTnode.generateUniqueId();
        }
        // Genera un identificador único para el nodo del árbol "Para el archivo .dot"
        static generateUniqueId() {
            return '\"xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0,
                v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Función para obtener el código .dot del árbol de sintaxis concreto "CST"
        getDot(node){
            let dot = '';
            dot += 'digraph G {\n';
            function addNodes(node){
                // ROOT
                if (node.type === 'ROOT') {dot += `${node.id} [label="${node.type}"];\n`;}
                // INSTRUCTION
                else if (node.type === 'INSTRUCTION'){dot += `${node.id} [label="${node.type} ${node.value}"];\n`;}
                // Registro General 64 Bits
                else if (node.type === 'Registro General 64 Bits'){dot += `${node.id} [label="${node.type} ${node.value}"];\n`;}
                // SOURCE1 AND SOURCE2
                else if (node.type === 'DESTINATION' || node.type === 'SOURCE1' || node.type === 'SOURCE2' ) {dot += `${node.id} [label="${node.value}"];\n`;}
                // R_64_BITS, R_32_BITS, R_STACK_POINTER, R_LINK_REGISTER, R_ZERO_REGISTER
                else if (node.type === 'R_64_BITS' || node.type === 'R_32_BITS' || node.type === 'R_STACK_POINTER' || node.type === 'R_LINK_REGISTER' || node.type === 'R_ZERO_REGISTER'){dot += `${node.id} [label="${node.value}"];\n`;}
                // LOGICAL_SHIFT_LEFT, LOGICAL_SHIFT_RIGHT, ARITHMETIC_SHIFT_RIGHT
                else if (node.type === 'LOGICAL_SHIFT_LEFT' || node.type === 'LOGICAL_SHIFT_RIGHT' || node.type === 'ARITHMETIC_SHIFT_RIGHT'){dot += `${node.id} [label="${node.value}"];\n`;}
                // UNSIGNED_EXTEND_BYTE, UNSIGNED_EXTEND_HALFWORD, UNSIGNED_EXTEND WORD, UNSIGNED_EXTEND_DOUBLEWORD, SIGNED_EXTEND_BYTE, SIGNED_EXTEND_HALFWORD, SIGNED_EXTEND_WORD, SIGNED_EXTEND_DOUBLEWORD
                else if (node.type === 'UNSIGNED_EXTEND_BYTE' || node.type === 'UNSIGNED_EXTEND_HALFWORD' || node.type === 'UNSIGNED_EXTEND WORD' || node.type === 'UNSIGNED_EXTEND_DOUBLEWORD' || node.type === 'SIGNED_EXTEND_BYTE' || node.type === 'SIGNED_EXTEND_HALFWORD' || node.type === 'SIGNED_EXTEND_WORD' || node.type === 'SIGNED_EXTEND_DOUBLEWORD'){dot += `${node.id} [label="${node.value}"];\n`;}
                else{dot += `${node.id} [label="${node.value}"];\n`;}
                // Agregar nodos hijos y aristas correspondientes a cada nodo del árbol "Recursivo"
                node.children.forEach(child => {
                    dot += `${node.id} -> ${child.id};\n`;
                    addNodes(child);
                });
            }
            addNodes(node);
            dot += '}';
            console.clear();
            console.log(dot);
            return dot;
        }

        // Función para obtener una lista de c3d de los nodos "Instruction" del árbol de sintaxis concreto "CST"
        // Esta función creará objetos tipo { resultado: 'R0', operador1: 'R1', operador2: 'R2', operacion: 'ADD' }
        getC3d(node){
            let instructions = [];
            let temporalCounter = 1;
            function getC3d(node){
                if(node.type === 'INSTRUCTION'){
                    let instruction = { resultado: '', operador1: '', operador2: '', operacion: '' };
                    instruction.operacion = node.value;
                    if(node.children.length === 4) {
                        // Si es mayor a 4 se debe crear una operación temporal con los valores 3 y 2 del arreglo
                        // Ejemplo: MADD R0, R1, R2, R3
                        // t1 = R1 * R2
                        // RO = R3 + t1
                        // La operación se toma del arreglo operations
                        const operation = operations.find(op => op.operation === node.value);
                        if(operation && operation.type === 'arithmetic') {
                            const temp1 = { resultado: 'T' + temporalCounter, operador1: node.children[1].children[0].value, operador2: node.children[2].children[0].value, operacion: operation.decompose[1] };
                            instructions.push(temp1);
                            instruction.operacion = operation.decompose[0];
                            instruction.resultado = node.children[0].children[0].value;
                            instruction.operador1 = node.children[3].children[0].value;
                            instruction.operador2 = 'T' + temporalCounter;
                            temporalCounter++;
                        } else if (operation && operation.type === 'conditional') {
                            const temp1 = { resultado: '', operador1: node.children[3].children[0].value, operador2: '', operacion: operation.decompose[operation.decompose.length - 1] };
                            instructions.push(temp1);
                            instruction.operacion = operation.decompose[0];
                            instruction.resultado = node.children[0].children[0].value;
                            instruction.operador1 = node.children[1].children[0].value;
                            instruction.operador2 = ''
                            let instruction2 = { resultado: '', operador1: '', operador2: '', operacion: '' };
                            instruction2.operacion = operation.decompose[1];
                            instruction2.resultado = node.children[0].children[0].value;
                            instruction2.operador1 = node.children[2].children[0].value;
                            instruction2.operador2 = ''
                            instructions.push(instruction2);
                        }
                    } else {
                        for(let i = 0; i < node.children.length; i++) {
                            if(i === 0) instruction.resultado = node.children[i].children[0].value;
                            if(i === 1) instruction.operador1 = node.children[i].children.length === 1 ? node.children[i].children[0].value : node.children[i].children[0].value + ' ' + node.children[i].children[1].children[0].value;
                            if(i === 2) instruction.operador2 = node.children[i].children.length === 1 ? node.children[i].children[0].value : node.children[i].children[0].value + ' ' + node.children[i].children[1].children[0].value;
                            if(i === 3) instruction.operacion = node.children[i].children.length === 1 ? node.children[i].children[0].value : node.children[i].children[0].value + ' ' + node.children[i].children[1].children[0].value;
                        }
                    }
                    instructions.push(instruction);
                }
                node.children.forEach(child => getC3d(child));
            }
            getC3d(node);
            return instructions;
        }

        // Función para obtener una lista de cuadruplos
        // Esta función recibe por parámetros un objeto con las instrucciones c3d { resultado: 'R0', operador1: 'R1', operador2: 'R2', operacion: 'ADD' }
        // Un cuadruplo se conforma de el operator, operando1, operando2 y destino
        getQuarters(c3dList) {
            let quarters = [];
            c3dList.forEach(c3d => {
                let quarter = { operator: '', operand1: '', operand2: '', destination: '' };
                quarter.operator = c3d.operacion;
                quarter.operand1 = c3d.operador1;
                quarter.operand2 = c3d.operador2;
                quarter.destination = c3d.resultado;
                quarters.push(quarter);
            });
            return quarters;
        }

    }

    // Función recursiva para concatenar todos los hijos de un nodo
    function getValues(children) {

    }

    // Funciones para crear y manipular nodos del árbol de sintaxis concreto "CST"
    function createNode(type, value, children = []){
        return new ASTnode(type, value, children);
    }
    function setValue(node, value){
        node.value = value;
    }
    function addChild(node, child){
        node.children.push(child);
    }
    function addChildren(node, children){
        node.children = node.children.concat(children);
    }
    // Función para obtener el código .dot del árbol de sintaxis concreto "CST"
    function getDot(node){
        let dot = '';
        dot += 'digraph G {\n';
        function addNodes(node){
            // ROOT
            if (node.type === 'ROOT') {dot += `${node.id} [label="${node.type}"];\n`;}
            // INSTRUCTION
            else if (node.type === 'INSTRUCTION'){dot += `${node.id} [label="${node.type} ${node.value}"];\n`;}
            // Registro General 64 Bits
            else if (node.type === 'Registro General 64 Bits'){dot += `${node.id} [label="${node.type} ${node.value}"];\n`;}
            // SOURCE1 AND SOURCE2
            else if (node.type === 'DESTINATION' || node.type === 'SOURCE1' || node.type === 'SOURCE2' ) {dot += `${node.id} [label="${node.value}"];\n`;}
            // R_64_BITS, R_32_BITS, R_STACK_POINTER, R_LINK_REGISTER, R_ZERO_REGISTER
            else if (node.type === 'R_64_BITS' || node.type === 'R_32_BITS' || node.type === 'R_STACK_POINTER' || node.type === 'R_LINK_REGISTER' || node.type === 'R_ZERO_REGISTER'){dot += `${node.id} [label="${node.value}"];\n`;}
            // LOGICAL_SHIFT_LEFT, LOGICAL_SHIFT_RIGHT, ARITHMETIC_SHIFT_RIGHT
            else if (node.type === 'LOGICAL_SHIFT_LEFT' || node.type === 'LOGICAL_SHIFT_RIGHT' || node.type === 'ARITHMETIC_SHIFT_RIGHT'){dot += `${node.id} [label="${node.value}"];\n`;}
            // UNSIGNED_EXTEND_BYTE, UNSIGNED_EXTEND_HALFWORD, UNSIGNED_EXTEND WORD, UNSIGNED_EXTEND_DOUBLEWORD, SIGNED_EXTEND_BYTE, SIGNED_EXTEND_HALFWORD, SIGNED_EXTEND_WORD, SIGNED_EXTEND_DOUBLEWORD
            else if (node.type === 'UNSIGNED_EXTEND_BYTE' || node.type === 'UNSIGNED_EXTEND_HALFWORD' || node.type === 'UNSIGNED_EXTEND WORD' || node.type === 'UNSIGNED_EXTEND_DOUBLEWORD' || node.type === 'SIGNED_EXTEND_BYTE' || node.type === 'SIGNED_EXTEND_HALFWORD' || node.type === 'SIGNED_EXTEND_WORD' || node.type === 'SIGNED_EXTEND_DOUBLEWORD'){dot += `${node.id} [label="${node.value}"];\n`;}
            else{dot += `${node.id} [label="${node.value}"];\n`;}
            // Agregar nodos hijos y aristas correspondientes a cada nodo del árbol "Recursivo"
            node.children.forEach(child => {
                dot += `${node.id} -> ${child.id};\n`;
                addNodes(child);
            });
        }
        addNodes(node);
        dot += '}';
        console.clear();
        console.log(dot);
        return dot;
    }
    const root = createNode('ROOT', 'ROOT');

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
