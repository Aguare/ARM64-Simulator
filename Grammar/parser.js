window.FASE1 = // @generated by Peggy 4.0.2.
//
// https://peggyjs.org/
(function() {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Init: peg$parseInit };
  var peg$startRuleFunction = peg$parseInit;

  var peg$c0 = "//";
  var peg$c1 = ";";
  var peg$c2 = ":";
  var peg$c3 = ",";
  var peg$c4 = ".";
  var peg$c5 = "ldr";
  var peg$c6 = "ldrb";
  var peg$c7 = "ldp";
  var peg$c8 = "str";
  var peg$c9 = "strb";
  var peg$c10 = "stp";
  var peg$c11 = "mov";
  var peg$c12 = "fmov";
  var peg$c13 = "ret";
  var peg$c14 = "svc";
  var peg$c15 = "global";
  var peg$c16 = "section";
  var peg$c17 = "data";
  var peg$c18 = "rodata";
  var peg$c19 = "text";
  var peg$c20 = "word";
  var peg$c21 = "ascii";
  var peg$c22 = "asciz";
  var peg$c23 = "string";
  var peg$c24 = "mrs";
  var peg$c25 = "psp";
  var peg$c26 = "msr";
  var peg$c27 = "cmp";
  var peg$c28 = "b";
  var peg$c29 = "bl";
  var peg$c30 = "beq";
  var peg$c31 = "bne";
  var peg$c32 = "bgt";
  var peg$c33 = "blt";
  var peg$c34 = "add";
  var peg$c35 = "sub";
  var peg$c36 = "mul";
  var peg$c37 = "udiv";
  var peg$c38 = "sdiv";
  var peg$c39 = "and";
  var peg$c40 = "orr";
  var peg$c41 = "eor";
  var peg$c42 = "mvn";
  var peg$c43 = "lsl";
  var peg$c44 = "lsr";
  var peg$c45 = "#";
  var peg$c46 = "[";
  var peg$c47 = "]";
  var peg$c48 = "\"";
  var peg$c49 = "=";

  var peg$r0 = /^[ \t\n\r]/;
  var peg$r1 = /^[\r\n]/;
  var peg$r2 = /^[_a-zA-Z]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[0-9a-f]/i;
  var peg$r5 = /^[dx]/i;
  var peg$r6 = /^[dx]/;
  var peg$r7 = /^[^"]/;

  var peg$e0 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e1 = peg$literalExpectation("//", false);
  var peg$e2 = peg$literalExpectation(";", false);
  var peg$e3 = peg$classExpectation(["\r", "\n"], false, false);
  var peg$e4 = peg$anyExpectation();
  var peg$e5 = peg$literalExpectation(":", false);
  var peg$e6 = peg$literalExpectation(",", false);
  var peg$e7 = peg$literalExpectation(".", false);
  var peg$e8 = peg$literalExpectation("ldr", true);
  var peg$e9 = peg$literalExpectation("ldrb", true);
  var peg$e10 = peg$literalExpectation("ldp", true);
  var peg$e11 = peg$literalExpectation("str", true);
  var peg$e12 = peg$literalExpectation("strb", true);
  var peg$e13 = peg$literalExpectation("stp", true);
  var peg$e14 = peg$literalExpectation("mov", true);
  var peg$e15 = peg$literalExpectation("fmov", true);
  var peg$e16 = peg$literalExpectation("ret", true);
  var peg$e17 = peg$literalExpectation("svc", true);
  var peg$e18 = peg$literalExpectation("global", true);
  var peg$e19 = peg$literalExpectation("section", true);
  var peg$e20 = peg$literalExpectation("data", true);
  var peg$e21 = peg$literalExpectation("rodata", true);
  var peg$e22 = peg$literalExpectation("text", true);
  var peg$e23 = peg$literalExpectation("word", true);
  var peg$e24 = peg$literalExpectation("ascii", true);
  var peg$e25 = peg$literalExpectation("asciz", true);
  var peg$e26 = peg$literalExpectation("string", true);
  var peg$e27 = peg$literalExpectation("mrs", true);
  var peg$e28 = peg$literalExpectation("psp", true);
  var peg$e29 = peg$literalExpectation("msr", true);
  var peg$e30 = peg$literalExpectation("cmp", true);
  var peg$e31 = peg$literalExpectation("b", true);
  var peg$e32 = peg$literalExpectation("bl", true);
  var peg$e33 = peg$literalExpectation("beq", true);
  var peg$e34 = peg$literalExpectation("bne", true);
  var peg$e35 = peg$literalExpectation("bgt", true);
  var peg$e36 = peg$literalExpectation("blt", true);
  var peg$e37 = peg$literalExpectation("add", true);
  var peg$e38 = peg$literalExpectation("sub", true);
  var peg$e39 = peg$literalExpectation("mul", true);
  var peg$e40 = peg$literalExpectation("udiv", true);
  var peg$e41 = peg$literalExpectation("sdiv", true);
  var peg$e42 = peg$literalExpectation("and", true);
  var peg$e43 = peg$literalExpectation("orr", true);
  var peg$e44 = peg$literalExpectation("eor", true);
  var peg$e45 = peg$literalExpectation("mvn", true);
  var peg$e46 = peg$literalExpectation("lsl", true);
  var peg$e47 = peg$literalExpectation("lsr", true);
  var peg$e48 = peg$classExpectation(["_", ["a", "z"], ["A", "Z"]], false, false);
  var peg$e49 = peg$literalExpectation("#", false);
  var peg$e50 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e51 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  var peg$e52 = peg$classExpectation(["d", "x"], false, true);
  var peg$e53 = peg$literalExpectation("[", false);
  var peg$e54 = peg$classExpectation(["d", "x"], false, false);
  var peg$e55 = peg$literalExpectation("]", false);
  var peg$e56 = peg$literalExpectation("\"", false);
  var peg$e57 = peg$classExpectation(["\""], true, false);
  var peg$e58 = peg$literalExpectation("=", false);

  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseInit() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseBody();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBody() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsedot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseglobalToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseLabel();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = [];
          s7 = peg$parseSection();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseSection();
          }
          s7 = peg$parse_();
          s1 = [s1, s2, s3, s4, s5, s6, s7];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSection() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsedot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesectionToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsedot();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsetextToken();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            s8 = peg$parseStatementBlock();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseStatementBlock();
            }
            s8 = peg$parse_();
            s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesectionToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parsedot();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedataToken();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = [];
              s8 = peg$parseVariableBlock();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseVariableBlock();
              }
              s8 = peg$parse_();
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedot();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesectionToken();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parsedot();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseroDataToken();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = [];
                s8 = peg$parseReadOnlyBlock();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseReadOnlyBlock();
                }
                s8 = peg$parse_();
                s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseStatementBlock() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseLabel();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsecolon();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$parseStatement();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseStatement();
        }
        s6 = peg$parse_();
        s1 = [s1, s2, s3, s4, s5, s6];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseInstruction();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseValue();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parsecomma();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseValue();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            s6 = [s6, s7, s8, s9, s10];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parsecomma();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseValue();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              s6 = [s6, s7, s8, s9, s10];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        s1 = [s1, s2, s3, s4, s5];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseretToken();
    }

    return s0;
  }

  function peg$parseInstruction() {
    var s0;

    s0 = peg$parseldrbToken();
    if (s0 === peg$FAILED) {
      s0 = peg$parseldrToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseldpToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestrbToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parsestrToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestpToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parsemovToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsefmovToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsesvcToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsemrsToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsemsrToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsepspToken();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsecmpToken();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsebeqToken();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsebgtToken();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsebltToken();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseblToken();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsebToken();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseaddToken();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsesubToken();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsemulToken();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseudivToken();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsesdivToken();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseandToken();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseorrToken();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseeorToken();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsemvnToken();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parselslToken();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parselsrToken();
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVariableBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsedot();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewordToken();
          if (s5 === peg$FAILED) {
            s5 = peg$parseasciiToken();
            if (s5 === peg$FAILED) {
              s5 = peg$parseascizToken();
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseValue();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReadOnlyBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseLabel();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecolon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parsedot();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseasciiToken();
          if (s5 === peg$FAILED) {
            s5 = peg$parseascizToken();
            if (s5 === peg$FAILED) {
              s5 = peg$parsestringToken();
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parsestringValue();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseValue() {
    var s0;

    s0 = peg$parseHexNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRecord();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLabel();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCallVariable();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestringValue();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWhitespace() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r0.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseWhitespace();
    if (s1 === peg$FAILED) {
      s1 = peg$parseComment();
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseComment();
      }
    }

    return s0;
  }

  function peg$parsecolon() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parsecomma() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parsedot() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parseldrToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c5) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseldrbToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c6) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseldpToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c7) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parsestrToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c8) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parsestrbToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c9) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parsestpToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c10) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parsemovToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c11) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parsefmovToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c12) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseretToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c13) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parsesvcToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c14) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseglobalToken() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c15) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parsesectionToken() {
    var s0;

    s0 = input.substr(peg$currPos, 7);
    if (s0.toLowerCase() === peg$c16) {
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parsedataToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c17) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseroDataToken() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c18) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parsetextToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c19) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    return s0;
  }

  function peg$parsewordToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c20) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    return s0;
  }

  function peg$parseasciiToken() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c21) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseascizToken() {
    var s0;

    s0 = input.substr(peg$currPos, 5);
    if (s0.toLowerCase() === peg$c22) {
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parsestringToken() {
    var s0;

    s0 = input.substr(peg$currPos, 6);
    if (s0.toLowerCase() === peg$c23) {
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parsemrsToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c24) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parsepspToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c25) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parsemsrToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c26) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parsecmpToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c27) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parsebToken() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (s0.toLowerCase() === peg$c28) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseblToken() {
    var s0;

    s0 = input.substr(peg$currPos, 2);
    if (s0.toLowerCase() === peg$c29) {
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parsebeqToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c30) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

    return s0;
  }

  function peg$parsebneToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c31) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parsebgtToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c32) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parsebltToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c33) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

    return s0;
  }

  function peg$parseaddToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c34) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parsesubToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c35) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parsemulToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c36) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parseudivToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c37) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parsesdivToken() {
    var s0;

    s0 = input.substr(peg$currPos, 4);
    if (s0.toLowerCase() === peg$c38) {
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseandToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c39) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }

    return s0;
  }

  function peg$parseorrToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c40) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parseeorToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c41) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parsemvnToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c42) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parselslToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c43) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }

    return s0;
  }

  function peg$parselsrToken() {
    var s0;

    s0 = input.substr(peg$currPos, 3);
    if (s0.toLowerCase() === peg$c44) {
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }

    return s0;
  }

  function peg$parseLabel() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r2.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsedot();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = input.charAt(peg$currPos);
          if (peg$r3.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = input.charAt(peg$currPos);
              if (peg$r3.test(s6)) {
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHexNumber() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r4.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r4.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e51); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecord() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r3.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c46;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
      if (s1 !== peg$FAILED) {
        s2 = input.charAt(peg$currPos);
        if (peg$r6.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = input.charAt(peg$currPos);
          if (peg$r3.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = input.charAt(peg$currPos);
              if (peg$r3.test(s4)) {
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c47;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e55); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestringValue() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c48;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r7.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c48;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r2.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCallVariable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c49;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r2.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  return {
    StartRules: ["Init"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()
;
